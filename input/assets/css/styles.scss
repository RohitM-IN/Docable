@import "../bootstrap/functions";
@import "../bootstrap/variables";
@import "../bootstrap/mixins";

html, body {
    overflow-x: hidden;
    width: 100%;
}

@media screen {
    @include media-breakpoint-up(md) {
        body {
            min-height: 100vh;
        }

        .icon-md-100 {
            width: 100% !important;
            height: auto !important;
        }
    }

    @include media-breakpoint-down(md) {
        body {
            -webkit-overflow-scrolling: touch;
        }
    }

    @include media-breakpoint-up(lg) {
        .h-lg-100 {
            height: 100%;
        }
    }

    @include media-breakpoint-up(xl) {
        .h-xl-100 {
            height: 100%;
        }
    }
}

@each $size, $length in $sizes {
    .max-vw-#{$size} {
        max-width: #{$size}vw !important;
    }

    .min-vw-#{$size} {
        min-width: #{$size}vw !important;
    }

    .max-vh-#{$size} {
        max-height: #{$size}vh !important;
    }

    .min-vh-#{$size} {
        min-height: #{$size}vh !important;
    }
}

@each $color, $value in $colors {
    @include text-emphasis-variant(".text-#{$color}", $value, true);

    .bg-#{$color} {
        background-color: $value;
    }

    .bg-gradient-#{$color} {
        background: $value linear-gradient(180deg, $value, darken($value, 10%)) repeat-x !important;
    }

    .text-#{$color} {
        color: $value;
    }

    .icon-#{$color} {
        --fa-primary-color: #{$value};
        --fa-secondary-color: #{lighten($value, 20%)};
    }
}

.icon-theme {
    --fa-primary-color: #{$primary};
    --fa-secondary-color: #{$secondary};
}

.icon-100 {
    width: 100% !important;
    height: auto !important;
}

$font-family-serif: 'Roboto Slab', serif !default;

.font-size-lg {
    font-size: $font-size-lg;
}

.font-size-sm {
    font-size: $font-size-sm;
}
.font-size-base {
    font-size: $font-size-base;
}

h1, h2, h3, .display-1, .display-2, .display-3, .display-4, .h-section {
    font-family: $font-family-serif;
    &:not(:first-child) {
        margin-top: $spacer * 1.5;
    }
}

h1 {
    font-weight: bold;
    color: darken($primary, 10%);
    background: -webkit-linear-gradient(darken($secondary, 10%), darken($primary, 10%));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    padding-bottom: $spacer * 0.15;
    margin-bottom: $spacer * 0.5;
}

h2, h3 {
    color: lighten($primary, 10%);
}

.border-muted {
    border-color: $text-muted !important;
}

.h-section {
    background-color: $gray-700;
    color: $white;
    padding: $spacer * 0.5;
    margin-bottom: $spacer * 1.5;
}

.bg-nav {
    background: $gray-200 linear-gradient(180deg, $gray-200, $white) repeat-x !important;
}

#logo {
    height: 2.5rem;
}

code {
    padding: .25rem .5rem;
    margin: 0;
}

pre code {
    padding: 0;
}

code, code[class*="language-"], pre[class*="language-"] {
    background-color: $gray-200;
    text-shadow: none;
    font-family: $font-family-monospace;
    font-size: $font-size-sm;
}

// Remove the border from headings of API tables and make the unstriped rows a little bit darker
.table-api {
    & thead {
        & th {
            border: none;
            background: $gray-200 linear-gradient(0deg, $gray-200, $gray-100) repeat-x !important;
            font-size: $font-size-sm;
        }
    }
    & tbody {
        & tr:nth-of-type(even) {
            background-color: rgba(0, 0, 0, 0.02);
        }
        & tr td:not(:first-child) {
            font-size: $font-size-sm;
        }
    }
}

.bg-body {
    background-color: $body-bg;
}

#hero {
    background: $primary linear-gradient(180deg, $primary, $secondary) repeat-x !important;
}

.product-wordmark {
    width: 3em;
}

.product-icon {
    font-size: $font-size-base * 1.5;
    margin-left: -($font-size-base * 0.75);
}

#content {
    ul:not([class]), ul[class=""] {
        li {
            padding-top: $spacer * .25;
            padding-bottom: $spacer * .25;
        }
    }

    &.p-4 > pre[class*="language-"] {
        margin-left: -$spacer * 1.5;
        margin-right: -$spacer * 1.5;
        padding-left: $spacer * 1.5;
        padding-right: $spacer * 1.5;
    }
}

#footer {
    background-color: $gray-900;
}

#titlebar {
    background: $primary linear-gradient(180deg, darken($secondary, 10%), darken($primary, 10%)) repeat-x !important;

    .breadcrumbs {
        color: $secondary;
        font-size: $h6-font-size;
        display: block;
        visibility: visible;

        span::after {
            color: darken($secondary, 10%);
            content: "/";
            font-weight: $font-weight-bold;
            margin-left: $spacer * 0.5;
            margin-right: $spacer * 0.5;
            font-size: $font-size-lg;
        }

        span:last-child:after {
            content: '';
        }

        & a {
            &, &:focus, &:active, &:hover {
                color: $secondary;
            }

            &:hover {
                color: darken($secondary, 5%);
            }
        }
    }

    .title {
        line-height: 1.5em;
        font-family: $font-family-serif;
        font-size: $h1-font-size * 1.2;

        small {
            font-size: $small-font-size * 0.8;
            color: lighten($primary, 30%);
        }
    }
}

#undertitle {
    background-color: darken($primary, 10%);

    @include media-breakpoint-up(md) {
        & > div {
            min-height: $spacer * 1.5;

            & > .row {
                min-height: $spacer * 1.5;
            }
        }
    }
}
.sidebar {
    @include media-breakpoint-up(md) {
        padding-bottom: $spacer * 1.5;
        margin-bottom: $spacer * 1.5;
        border-bottom: none;
        padding-bottom: 0;
        margin-bottom: 0;
        overflow-y: auto;
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        opacity: 0.6;
        transition: opacity 0.5s;
        display: block !important;

        &:hover {
            opacity: 1;
        }
    }

    padding-top: $spacer;
}

// sidebar-root elements can be nested to show root-level styling inside a sidebar
.sidebar-root {
    // Root-level items
    & > .sidebar-nav-item {
        margin-bottom: $spacer;
        font-weight: $font-weight-bold;

        &.sidebar-header {
            margin-bottom: $spacer * 0.25;
            color: $gray-700;
            font-size: $font-size-sm;
            text-transform: uppercase;
        }

        &.has-children {
            border-bottom: 1px solid $gray-300;
            margin-bottom: 0;
        }
    }

    & > .sidebar-nav-children {
        margin-bottom: $spacer;
        font-size: $font-size-sm;

        & > .sidebar-nav-children {
            font-size: $font-size-sm * 0.875;
            padding-left: $spacer * 0.5;
        }
    }

    // All items
    & .sidebar-nav-item {
        padding-left: $spacer * 0.5;
        padding-right: $spacer * 0.5;
        padding-bottom: $spacer * 0.25;
        padding-top: $spacer * 0.25;
        margin-bottom: $spacer * 0.25;
        color: $gray-600;

        &.has-children {
            margin-bottom: 0;
        }

        &.active {
            font-weight: $font-weight-bold;
            color: $white;
            background-color: darken($primary, 15%);

            & a {
                &, &:focus, &:active {
                    color: $white;
                }

                &:hover {
                    color: $white;
                }
            }
        }

        & a {
            &, &:focus, &:active {
                color: $gray-600;
            }

            &:hover {
                color: darken($primary, 30%);
            }
        }
    }
}

.page-box {
    border: 1px solid $gray-200;
    @include box-shadow($btn-box-shadow);
    @include border-radius($border-radius, 0);

    *:last-child {
        margin-bottom: 0;
    }
}

/* Mermaid */
.mermaid {
    overflow: hidden !important;
    visibility: hidden !important;
    margin-bottom: $spacer;
    margin-top: $spacer;

    &[data-processed="true"] {
      visibility: visible !important;
    }
    min-height: 200px;

    svg {
      min-height: 200px;
    }
  }
  .node rect,
  .node circle,
  .node ellipse,
  .node polygon {
    fill: lighten($primary, 50%) !important;
    stroke: #000 !important;
  }
  .type-node rect,
  .type-node circle,
  .type-node ellipse,
  .type-node polygon {
    fill: lighten($primary, 30%) !important;
    stroke: #000 !important;
  }
  .cluster rect {
    fill: $gray-100 !important;
    stroke: $gray-300 !important;
  }